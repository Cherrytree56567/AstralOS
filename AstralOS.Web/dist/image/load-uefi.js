var Module = typeof Module != 'undefined' ? Module : {};
Module['expectedDataFileDownloads'] ??= 0;
Module['expectedDataFileDownloads']++;
(() => {
  // Do not attempt to redownload the virtual filesystem data when in a pthread or a Wasm Worker context.
  var isPthread = typeof ENVIRONMENT_IS_PTHREAD != 'undefined' && ENVIRONMENT_IS_PTHREAD;
  var isWasmWorker = typeof ENVIRONMENT_IS_WASM_WORKER != 'undefined' && ENVIRONMENT_IS_WASM_WORKER;
  if (isPthread || isWasmWorker) return;
  var isNode = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
  async function loadPackage(metadata) {
    var PACKAGE_PATH = '';
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/')) + '/');
    } else if (typeof process === 'undefined' && typeof location !== 'undefined') {
      // web worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.substring(0, location.pathname.lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = 'load-uefi.data';
    var REMOTE_PACKAGE_BASE = 'load-uefi.data';
    var REMOTE_PACKAGE_NAME = Module['locateFile']?.(REMOTE_PACKAGE_BASE, '') ?? REMOTE_PACKAGE_BASE;
    var REMOTE_PACKAGE_SIZE = metadata['remote_package_size'];
    async function fetchRemotePackage(packageName, packageSize) {
      if (isNode) {
        var fsPromises = require('fs/promises');
        var contents = await fsPromises.readFile(packageName);
        return contents.buffer;
      }
      Module['dataFileDownloads'] ??= {};
      try {
        var response = await fetch(packageName);
      } catch (e) {
        throw new Error(`Network Error: ${packageName}`, {
          e
        });
      }
      if (!response.ok) {
        throw new Error(`${response.status}: ${response.url}`);
      }
      const chunks = [];
      const headers = response.headers;
      const total = Number(headers.get('Content-Length') ?? packageSize);
      let loaded = 0;
      Module['setStatus']?.('Downloading data...');
      const reader = response.body.getReader();
      while (1) {
        var {
          done,
          value
        } = await reader.read();
        if (done) break;
        chunks.push(value);
        loaded += value.length;
        Module['dataFileDownloads'][packageName] = {
          loaded,
          total
        };
        let totalLoaded = 0;
        let totalSize = 0;
        for (const download of Object.values(Module['dataFileDownloads'])) {
          totalLoaded += download.loaded;
          totalSize += download.total;
        }
        Module['setStatus']?.(`Downloading data... (${totalLoaded}/${totalSize})`);
      }
      const packageData = new Uint8Array(chunks.map(c => c.length).reduce((a, b) => a + b, 0));
      let offset = 0;
      for (const chunk of chunks) {
        packageData.set(chunk, offset);
        offset += chunk.length;
      }
      return packageData.buffer;
    }
    var fetchPromise;
    var fetched = Module['getPreloadedPackage']?.(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE);
    if (!fetched) {
      // Note that we don't use await here because we want to execute the
      // the rest of this function immediately.
      fetchPromise = fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE);
    }
    async function runWithFS(Module) {
      function assert(check, msg) {
        if (!check) throw new Error(msg);
      }
      Module['FS_createPath']("/", "uefi", true, true);
      async function processPackageData(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file failed.');
        assert(arrayBuffer.constructor.name === ArrayBuffer.name, 'bad input to processPackageData');
        var byteArray = new Uint8Array(arrayBuffer);
        var curr;
        var compressedData = {
          "data": null,
          "cachedOffset": 1269970,
          "cachedIndexes": [-1, -1],
          "cachedChunks": [null, null],
          "offsets": [0, 2028, 4076, 6124, 8172, 10220, 12268, 14316, 16364, 18412, 20460, 22508, 24556, 26604, 28652, 30700, 32748, 34796, 36844, 38892, 40940, 42988, 45036, 47084, 49132, 51180, 53228, 55276, 57324, 59372, 61420, 63468, 65516, 67564, 69612, 71660, 73708, 75756, 77804, 79852, 81900, 83948, 85996, 88044, 90092, 92140, 94188, 96236, 98284, 100332, 102380, 104428, 106476, 108524, 110572, 112620, 114668, 116716, 118764, 120812, 122860, 124908, 126956, 129004, 131052, 133100, 135148, 137196, 139244, 141292, 143340, 145388, 147436, 149484, 151532, 153580, 155628, 157676, 159724, 161772, 163820, 165868, 167916, 169964, 172012, 174060, 176108, 178156, 180204, 182252, 184300, 186348, 188396, 190444, 192492, 194540, 196588, 198636, 200684, 202732, 204780, 206828, 208876, 210924, 212972, 215020, 217068, 219116, 221164, 223212, 225260, 227308, 229356, 231404, 233452, 235500, 237548, 239596, 241644, 243692, 245740, 247788, 249836, 251884, 253932, 255980, 258028, 260076, 262124, 264172, 266220, 268268, 270316, 272364, 274412, 276460, 278508, 280556, 282604, 284652, 286700, 288748, 290796, 292844, 294892, 296940, 298988, 301036, 303084, 305132, 307180, 309228, 311276, 313324, 315372, 317420, 319468, 321516, 323564, 325612, 327660, 329708, 331756, 333804, 335852, 337900, 339948, 341996, 344044, 346092, 348140, 350188, 352236, 354284, 356332, 358380, 360428, 362476, 364524, 366572, 368620, 370668, 372716, 374764, 376812, 378860, 380908, 382956, 385004, 387052, 389100, 391148, 393196, 395244, 397292, 399340, 401388, 403436, 405484, 407532, 409580, 411628, 413676, 415724, 417772, 419820, 421868, 423916, 425964, 428012, 430060, 432108, 434156, 436204, 438252, 440300, 442348, 444396, 446444, 448492, 450540, 452588, 454636, 456684, 458732, 460780, 462828, 464876, 466924, 468972, 471020, 473068, 475116, 477164, 479212, 481260, 483308, 485356, 487404, 489452, 491500, 493548, 495596, 497644, 499692, 501740, 503788, 505836, 507884, 509932, 511980, 514028, 516076, 518124, 520172, 522220, 524268, 526316, 528364, 530412, 532460, 534508, 536556, 538604, 540652, 542700, 544748, 546796, 548844, 550892, 552940, 554988, 557036, 559084, 561132, 563180, 565228, 567276, 569324, 571372, 573420, 575468, 577516, 579564, 581612, 583660, 585708, 587756, 589804, 591852, 593900, 595948, 597996, 600044, 602092, 604140, 606188, 608236, 610284, 612332, 614380, 616428, 618476, 620524, 622572, 624620, 626668, 628716, 630764, 632812, 634860, 636908, 638956, 641004, 643052, 645100, 647148, 649196, 651244, 653292, 655340, 657388, 659436, 661484, 663532, 665580, 667628, 669676, 671724, 673772, 675820, 677868, 679916, 681964, 684012, 686060, 688108, 690156, 692204, 694252, 696300, 698348, 700396, 702444, 704492, 706540, 708588, 710636, 712684, 714732, 716780, 718828, 720876, 722924, 724972, 727020, 729068, 731116, 733164, 735212, 737260, 739308, 741356, 743404, 745452, 747500, 749548, 751596, 753644, 755692, 757740, 759788, 761836, 763884, 765932, 767980, 770028, 772076, 774124, 776172, 778220, 780268, 782316, 784364, 786412, 788460, 790508, 792556, 794604, 796652, 798700, 800748, 802796, 804844, 806892, 808940, 810988, 813036, 815084, 817132, 819180, 821228, 823276, 825324, 827372, 829420, 831468, 833516, 835564, 837612, 839660, 841708, 843756, 845804, 847852, 849900, 851948, 853996, 856044, 858092, 860140, 862188, 864236, 866284, 868332, 870380, 872428, 874476, 876524, 878572, 880620, 882668, 884716, 886764, 888812, 890860, 892908, 894956, 897004, 899052, 901100, 903148, 905196, 907244, 909292, 911340, 913388, 915436, 917484, 919532, 921580, 923628, 925676, 927724, 929772, 931820, 933868, 935916, 937964, 940012, 942060, 944108, 946156, 948204, 950252, 952300, 954348, 956396, 958444, 960492, 962540, 964588, 966636, 968684, 970732, 972780, 974828, 976876, 978924, 980972, 983020, 985068, 987116, 989164, 991212, 993260, 995308, 997356, 999404, 1001452, 1003500, 1005548, 1007596, 1009644, 1011692, 1013740, 1015788, 1017836, 1019884, 1021932, 1023980, 1026028, 1028076, 1030124, 1032172, 1034220, 1036268, 1038316, 1040364, 1042412, 1044460, 1046508, 1048556, 1050604, 1052652, 1054700, 1056748, 1058796, 1060844, 1062892, 1064940, 1066988, 1069036, 1071084, 1073132, 1075180, 1077228, 1079276, 1081324, 1083372, 1085420, 1087468, 1089516, 1091564, 1093612, 1095660, 1097708, 1099756, 1101804, 1103852, 1105900, 1107948, 1109996, 1112044, 1114092, 1116140, 1118188, 1120236, 1122284, 1124332, 1126380, 1128428, 1130476, 1132524, 1134572, 1136620, 1138668, 1140716, 1142764, 1144812, 1146860, 1148908, 1150956, 1153004, 1155052, 1157100, 1159148, 1161196, 1163244, 1165292, 1167340, 1169388, 1171436, 1173484, 1175532, 1177580, 1179628, 1181676, 1183724, 1185772, 1187820, 1189868, 1191916, 1193964, 1196012, 1198060, 1200108, 1202156, 1204204, 1206252, 1208300, 1210348, 1212396, 1214444, 1216492, 1218540, 1220588, 1222636, 1224684, 1226732, 1228578, 1228737, 1228762, 1228787, 1228812, 1228837, 1228862, 1228887, 1228912, 1228937, 1228962, 1228987, 1229012, 1229037, 1229062, 1229087, 1229112, 1229137, 1229162, 1229187, 1229212, 1229237, 1229262, 1229287, 1229312, 1229337, 1229362, 1229387, 1229412, 1229437, 1229462, 1229487, 1229512, 1229537, 1229562, 1229587, 1229612, 1229637, 1229662, 1229687, 1229712, 1229737, 1229762, 1229787, 1229812, 1229837, 1229862, 1229887, 1229912, 1229937, 1229962, 1229987, 1230012, 1230037, 1230062, 1230087, 1230112, 1230137, 1230162, 1230187, 1230212, 1230237, 1230262, 1230287, 1230312, 1230337, 1230362, 1230387, 1230412, 1230437, 1230462, 1230487, 1230512, 1230537, 1230562, 1230587, 1230612, 1230637, 1230662, 1230687, 1230712, 1230737, 1230762, 1230787, 1230812, 1230837, 1230862, 1230887, 1230912, 1230937, 1230962, 1230987, 1231012, 1231037, 1231062, 1231087, 1231112, 1231137, 1231162, 1231187, 1231212, 1231237, 1231262, 1231287, 1231312, 1231337, 1231362, 1231387, 1231412, 1231437, 1231462, 1231487, 1231512, 1231537, 1231562, 1231587, 1231612, 1231637, 1231662, 1231687, 1231712, 1231737, 1231762, 1231787, 1231812, 1231837, 1231862, 1231887, 1231912, 1231937, 1231962, 1231987, 1232012, 1232037, 1232062, 1232087, 1232112, 1232137, 1232162, 1232187, 1232212, 1232237, 1232262, 1232287, 1232312, 1232337, 1232362, 1232387, 1232412, 1232437, 1232462, 1232487, 1232512, 1232537, 1232562, 1232587, 1232612, 1232637, 1232662, 1232687, 1232712, 1232737, 1232762, 1232787, 1232812, 1232837, 1232862, 1232887, 1232912, 1232937, 1232962, 1232987, 1233012, 1233037, 1233062, 1233087, 1233112, 1233137, 1233162, 1233187, 1233212, 1233237, 1233262, 1233287, 1233312, 1233337, 1233362, 1233387, 1233412, 1233437, 1233462, 1233487, 1233512, 1233537, 1233562, 1233587, 1233612, 1233637, 1233662, 1233687, 1233712, 1233737, 1233762, 1233787, 1233812, 1233837, 1233862, 1233887, 1233912, 1233937, 1233962, 1233987, 1234012, 1234037, 1234062, 1234087, 1234112, 1234137, 1234162, 1234187, 1234212, 1234237, 1234262, 1234287, 1234312, 1234337, 1234362, 1234387, 1234412, 1234437, 1234462, 1234487, 1234512, 1234537, 1234562, 1234587, 1234612, 1234637, 1234662, 1234687, 1234712, 1234737, 1234762, 1234787, 1234812, 1234837, 1234862, 1234887, 1234912, 1234937, 1234962, 1234987, 1235012, 1235037, 1235062, 1235087, 1235112, 1236670, 1238188, 1239820, 1241626, 1243308, 1244914, 1246685, 1248526, 1250303, 1252170, 1253975, 1255366, 1256422, 1257541, 1258801, 1259954, 1259979, 1260004, 1260029, 1260054, 1260079, 1260104, 1260129, 1260154, 1260179, 1260204, 1260229, 1260254, 1260279, 1260304, 1260329, 1260354, 1260379, 1260404, 1260429, 1260454, 1260479, 1260504, 1260529, 1260554, 1260579, 1260604, 1260629, 1260654, 1260679, 1260704, 1260729, 1260754, 1260779, 1260804, 1260829, 1260854, 1260879, 1260904, 1260929, 1260954, 1260979, 1261004, 1261029, 1261054, 1261079, 1261104, 1261129, 1261154, 1261179, 1261204, 1261229, 1261254, 1261279, 1261304, 1261329, 1261354, 1261379, 1261404, 1261429, 1261454, 1261479, 1261504, 1261529, 1261554, 1261579, 1261604, 1261629, 1261654, 1261679, 1261704, 1261729, 1261754, 1261779, 1261804, 1261829, 1261854, 1261879, 1261904, 1261929, 1261954, 1261979, 1262004, 1262029, 1262054, 1262079, 1262104, 1262129, 1263238, 1263486, 1263649, 1263812, 1264012, 1264579, 1265202, 1265560, 1265953, 1266333, 1266737, 1267164, 1267537, 1267987, 1268356, 1268617, 1268642, 1268667, 1268692, 1268717, 1268742, 1268767, 1268792, 1268817, 1268842, 1268867, 1268892, 1268917, 1268942, 1268967, 1268992, 1269108, 1269133, 1269159, 1269185, 1269211, 1269237, 1269263, 1269289, 1269315, 1269341, 1269367, 1269393, 1269419, 1269445, 1269471, 1269497, 1269523, 1269549, 1269575, 1269601, 1269627, 1269653, 1269679, 1269705, 1269731, 1269757, 1269783, 1269809, 1269835, 1269861, 1269887, 1269913, 1269939],
          "sizes
          "successes": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        };
        compressedData['data'] = byteArray;
        assert(typeof Module['LZ4'] === 'object', 'LZ4 not present - was your app build with -sLZ4?');
        Module['LZ4'].loadPackage({
          'metadata': metadata,
          'compressedData': compressedData
        }, false);
        Module['removeRunDependency']('datafile_load-uefi.data');
      }
      Module['addRunDependency']('datafile_load-uefi.data');
      Module['preloadResults'] ??= {};
      Module['preloadResults'][PACKAGE_NAME] = {
        fromCache: false
      };
      if (!fetched) {
        fetched = await fetchPromise;
      }
      processPackageData(fetched);
      Module.FS.mkdir('/writable');
      const varsData = Module.FS.readFile('/uefi/OVMF_VARS-pure-efi.fd', {
        encoding: 'binary'
      });
      Module.FS.writeFile('/writable/OVMF_VARS-pure-efi.fd', varsData, {
        encoding: 'binary'
      });
    }
    if (Module['calledRun']) {
      runWithFS(Module);
    } else {
      (Module['preRun'] ??= []).push(runWithFS); // FS is not initialized yet, wait for it
    }
  }
  loadPackage({
    "files": [{
      "filename": "/uefi/OVMF_CODE-pure-efi.fd",
      "start": 0,
      "end": 1966080
    }, {
      "filename": "/uefi/OVMF_VARS-pure-efi.fd",
      "start": 1966080,
      "end": 2097152
    }],
    "remote_package_size": 1274066
  });
})();